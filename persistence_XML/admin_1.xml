<?xml version="1.0" encoding="UTF-8"?>


<admin>
    <id>test1</id>
    <password>5A105E8B9D40E1329780D62EA2265D8A</password>
  </admin>
<admin>

<steps>
  <step>
    <id>S000001</id>
    <nameToShow>Step 1</nameToShow>
    <fatherStep></fatherStep>
    <dependencies>
      <dependency>
        <ifComponents>
          <component>S000001C000001</component>
          <component>S000001C000001</component>
        </ifComponents>
        <!-- single, or, and, xor -->
        <ifOperator></ifOperator>
        <thenComponents>
          <component>S000001C000001</component>
        </thenComponents>
        <!-- single, or, and, xor -->
        <thenOperator></thenOperator>
        <!-- exclude, require -->
        <ruletype></ruletype>
      </dependency>
    </dependencies>
    <presentation>
      <exclude>
        <!-- manual -> dialog (with exclude components or to choose exclude/other Config)  -->
        <!-- auto -> graying, takeOut, untouched -->
        <kind></kind>
      </exclude>
      <require>
        <!-- dialog (dialog window with required components) -->
        <!--  -->
        <kind></kind>
      </require>
    </presentation>
    <nextSteps>
      <nextStep component="S000001C000001" step="S000002"/>
      <nextStep component="S000001C000002" step="S000002"/>
      <nextStep component="S000001C000003" step="S000003"/>
    </nextSteps>
    <!--last, first, default-->
    <kind>first</kind>
    <selectionCriterium>
      <min>1</min>
      <max>1</max>
    </selectionCriterium>
    <!-- sources | db | xml | json -->
    <!--wenn Quelle DB ist, werden alle Spalten des Components ins Objekt geschrieben,
        deswegen der Objekt soll dynamisch aufgebaut werden. Die felder werden mit z.B Peflexion
        erzeugt werden, da keine definierte aufbau existiert. -->
    <from source="xml">
      <sqlStatement></sqlStatement>
      <!--inside empty, outside pathString -->
      <path></path>
    </from>
    <!-- Bevor die Komponenten gelesen werden, sollte die nextSteps mit components Ã¼bereinstimmen -->
    <components>
      <component>
        <id>S000001C000001</id>
        <!--immutable, mutable -->
        <kind>immutable</kind>
        <nameToShow>Component 1</nameToShow>
      </component>
      <component>
        <id>S000001C000002</id>
        <kind>immutable</kind>
        <nameToShow>Component 2</nameToShow>
      </component>
      <component>
        <id>S000001C000003</id>
        <kind>immutable</kind>
        <nameToShow>Component 3</nameToShow>
      </component>
      <component>
        <id>S000003C000003</id>
        <kind>mutable</kind>
        <nameToShow>Component 3</nameToShow>
        <minValue>0</minValue>
        <maxValue>10</maxValue>
        <defaultValue>5</defaultValue>
        <interval>1</interval>
        <intervals></intervals>
      </component>
    </components>
  
  </step>


</steps>